# Welcome to Serverless!
#
service: import-service-v2

frameworkVersion: '2'

custom:
  sqsQueueName: catalogItemsQueue

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  profile: sdmAccount

  environment:
    BUCKET_NAME: import-service-v2
    PARSED_FOLDER: parsed/
    REGION: eu-west-1
    UPLOADED_FOLDER: uploaded/
    SQS_QUEUE_URL:
      Ref: SqsQueue

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - Fn::GetAtt: [SqsQueue, Arn]

plugins:
  - serverless-plugin-webpack

resources:
  Resources:
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: 401
    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: 403
    SqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsQueueName}
  Outputs:
    SqsQueueArn:
      Value:
        Fn::GetAtt: [SqsQueue, Arn]
      Export:
        Name: ${self:custom.sqsQueueName}Arn

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            arn: '${cf:authorization-service-${self:provider.stage}.basicAuthorizerArn}'
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:provider.environment.UPLOADED_FOLDER}
          existing: true
