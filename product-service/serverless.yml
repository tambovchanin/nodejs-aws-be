# Welcome to Serverless!
#
service: profuct-service

frameworkVersion: '2'

custom:
  snsSubscriptionSingleEndpoint: user1@mail.ru
  snsSubscriptionMultipleEndpoint: user2@mail.ru
  snsTopicName: createProductTopic
  sqsQueueName: catalogItemsQueue

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  profile: sdmAccount

  environment:
    PG_USER: ${env.PG_USER}
    PG_DATABASE: ${env.PG_DATABASE}
    PG_INSTANCE: ${env.PG_INSTANCE}
    PG_PORT: ${env.PG_PORT}
    PG_PASS: ${env.PG_PASS}
    SNS_TOPIC_ARN:
      Ref: SnsTopic

  iamRoleStatements:
    - Action:
        - sns:*
      Effect: Allow
      Resource:
        - Ref: SnsTopic
    - Action:
        - sqs:*
      Effect: Allow
      Resource:
        - !ImportValue ${self:custom.sqsQueueName}Arn

plugins:
  - serverless-plugin-webpack
  - serverless-dotenv-plugin

resources:
  Resources:
    SnsSubscriptionSingle:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.snsSubscriptionSingleEndpoint}
        FilterPolicy:
          numOfProducts:
            - numeric:
                - "<"
                - 2
        Protocol: email
        TopicArn:
          Ref: SnsTopic
    SnsSubscriptionMultiple:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.snsSubscriptionMultipleEndpoint}
        FilterPolicy:
          numOfProducts:
            - numeric:
                - ">="
                - 2
        Protocol: email
        TopicArn:
          Ref: SnsTopic
    SnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicName}

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: product
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                id: true
  addProduct:
    handler: handler.addProduct
    events:
      - http:
          path: product
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            !ImportValue ${self:custom.sqsQueueName}Arn
